<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cronología de ideas desordenadas - articles</title><link href="/" rel="alternate"></link><link href="/feeds/articles.atom.xml" rel="self"></link><id>/</id><updated>2021-01-29T00:00:00-03:00</updated><entry><title>Mockig a database cursor instance</title><link href="/articles/2021/01/29/mockig-a-cursor-db/" rel="alternate"></link><published>2021-01-29T00:00:00-03:00</published><updated>2021-01-29T00:00:00-03:00</updated><author><name>nestornav</name></author><id>tag:None,2021-01-29:/articles/2021/01/29/mockig-a-cursor-db/</id><summary type="html">&lt;p&gt;I found an issue recently, when I tried to mock a function that has the following behavior.
There is a query to database to fetch several rows, the result is a cursor that will be iterated later. Hence each iteration will write a file with the result.
The designed test …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found an issue recently, when I tried to mock a function that has the following behavior.
There is a query to database to fetch several rows, the result is a cursor that will be iterated later. Hence each iteration will write a file with the result.
The designed test assert if the function write or not the file.&lt;/p&gt;
&lt;p&gt;A code example about my first attemp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;output_csv.csv&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# The folling function retrive a db connection instance&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_connection_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;
&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Function to test&lt;/span&gt;
&lt;span class="n"&gt;process_query_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The test aims to mock both a new database connection and the cursor. Later that the cursor will be iterated and after call &lt;code&gt;fetchone&lt;/code&gt; the result will be written as a line into the file.
In this case I used the property &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value"&gt;return_value&lt;/a&gt; from mock. This property will return a list of integer each time that &lt;code&gt;cursor&lt;/code&gt; is consumed from &lt;code&gt;process_query_result&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The test step described before did not work also I needed to interrupt the execution due to the test never end. That situation happent because the function &lt;code&gt;process_query_result&lt;/code&gt; use a while statement over the cursor and never break the loop.&lt;/p&gt;
&lt;p&gt;With a little bit of debuging time, I found which was my mistake. The property &lt;code&gt;return_value&lt;/code&gt; returned the full list of integers each time that &lt;code&gt;fetch_one&lt;/code&gt; function of the cursor was called. So the loop never reaches the end in consequence the iterator never got an &lt;code&gt;StopIteration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What I was looking for from the very first time was the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect"&gt;side_effect&lt;/a&gt; property. This one has more or less the following behave:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eureka! what I needed! Something that mimics an iterable! From now &lt;code&gt;fetchone&lt;/code&gt; will not reutrn the full list. Finally I needed just tweak a single line as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return_fav_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the test ran right this time. In a nutshell if you need mock an iterable instance inside a fuction, the best option will be use &lt;code&gt;side_effect&lt;/code&gt;.&lt;/p&gt;</content><category term="articles"></category></entry><entry><title>Nuevo post test</title><link href="/articles/2020/05/25/test/" rel="alternate"></link><published>2020-05-25T00:00:00-03:00</published><updated>2020-05-25T00:00:00-03:00</updated><author><name>nestornav</name></author><id>tag:None,2020-05-25:/articles/2020/05/25/test/</id><content type="html">&lt;p&gt;Como todo principio, hay un Hola Mundo!.&lt;/p&gt;</content><category term="articles"></category></entry></feed>